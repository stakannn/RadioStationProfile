{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85bef662",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-19T14:35:02.680278Z",
     "iopub.status.busy": "2025-05-19T14:35:02.680074Z",
     "iopub.status.idle": "2025-05-19T14:35:09.738392Z",
     "shell.execute_reply": "2025-05-19T14:35:09.737798Z"
    },
    "papermill": {
     "duration": 7.064294,
     "end_time": "2025-05-19T14:35:09.739668",
     "exception": false,
     "start_time": "2025-05-19T14:35:02.675374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import librosa\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f0a960a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:35:09.747095Z",
     "iopub.status.busy": "2025-05-19T14:35:09.746759Z",
     "iopub.status.idle": "2025-05-19T14:36:46.940661Z",
     "shell.execute_reply": "2025-05-19T14:36:46.939822Z"
    },
    "papermill": {
     "duration": 97.199089,
     "end_time": "2025-05-19T14:36:46.942233",
     "exception": false,
     "start_time": "2025-05-19T14:35:09.743144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_parquet('/kaggle/input/speech-and-music-in-languages/speechAndMusicWLanguages.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "606ad37d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:36:46.950115Z",
     "iopub.status.busy": "2025-05-19T14:36:46.949834Z",
     "iopub.status.idle": "2025-05-19T14:36:46.962391Z",
     "shell.execute_reply": "2025-05-19T14:36:46.961670Z"
    },
    "papermill": {
     "duration": 0.017405,
     "end_time": "2025-05-19T14:36:46.963569",
     "exception": false,
     "start_time": "2025-05-19T14:36:46.946164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = data.sample(frac=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2167581d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:36:46.970379Z",
     "iopub.status.busy": "2025-05-19T14:36:46.970174Z",
     "iopub.status.idle": "2025-05-19T14:36:46.973762Z",
     "shell.execute_reply": "2025-05-19T14:36:46.973266Z"
    },
    "papermill": {
     "duration": 0.008115,
     "end_time": "2025-05-19T14:36:46.974706",
     "exception": false,
     "start_time": "2025-05-19T14:36:46.966591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess(audio, sr=48000):\n",
    "    mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sr)\n",
    "    log_mel_spectrogram = librosa.power_to_db(mel_spectrogram)\n",
    "    return log_mel_spectrogram # (128, 282)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dbd6dc44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:36:46.981355Z",
     "iopub.status.busy": "2025-05-19T14:36:46.981153Z",
     "iopub.status.idle": "2025-05-19T14:39:15.241630Z",
     "shell.execute_reply": "2025-05-19T14:39:15.241001Z"
    },
    "papermill": {
     "duration": 148.265479,
     "end_time": "2025-05-19T14:39:15.243108",
     "exception": false,
     "start_time": "2025-05-19T14:36:46.977629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data['log_mel_spectrogram'] = data['array'].apply(lambda x: preprocess(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "51be54c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.251424Z",
     "iopub.status.busy": "2025-05-19T14:39:15.250517Z",
     "iopub.status.idle": "2025-05-19T14:39:15.254561Z",
     "shell.execute_reply": "2025-05-19T14:39:15.253879Z"
    },
    "papermill": {
     "duration": 0.008996,
     "end_time": "2025-05-19T14:39:15.255698",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.246702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def labels_to_int(label):\n",
    "    if label == 'speech':\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b2bd7fb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.262256Z",
     "iopub.status.busy": "2025-05-19T14:39:15.262057Z",
     "iopub.status.idle": "2025-05-19T14:39:15.269271Z",
     "shell.execute_reply": "2025-05-19T14:39:15.268579Z"
    },
    "papermill": {
     "duration": 0.011709,
     "end_time": "2025-05-19T14:39:15.270353",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.258644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data['label'] = data['label'].apply(lambda x: labels_to_int(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ffaf0a52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.277369Z",
     "iopub.status.busy": "2025-05-19T14:39:15.276864Z",
     "iopub.status.idle": "2025-05-19T14:39:15.280571Z",
     "shell.execute_reply": "2025-05-19T14:39:15.280072Z"
    },
    "papermill": {
     "duration": 0.008235,
     "end_time": "2025-05-19T14:39:15.281497",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.273262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = data['label'].values.tolist()\n",
    "log_mel_spectrograms = data['log_mel_spectrogram'].values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b830213e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.288184Z",
     "iopub.status.busy": "2025-05-19T14:39:15.287984Z",
     "iopub.status.idle": "2025-05-19T14:39:15.468328Z",
     "shell.execute_reply": "2025-05-19T14:39:15.467647Z"
    },
    "papermill": {
     "duration": 0.184644,
     "end_time": "2025-05-19T14:39:15.469361",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.284717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>array</th>\n",
       "      <th>language_code</th>\n",
       "      <th>label</th>\n",
       "      <th>log_mel_spectrogram</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6798</th>\n",
       "      <td>ja0_248music</td>\n",
       "      <td>[-0.09191726, -0.08297913, -0.082977295, -0.09...</td>\n",
       "      <td>ja</td>\n",
       "      <td>0</td>\n",
       "      <td>[[11.162772, 8.866536, -0.89963734, -3.65234, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5711</th>\n",
       "      <td>fr0_14211music</td>\n",
       "      <td>[0.019935856, 0.018189777, 0.017345574, 0.0169...</td>\n",
       "      <td>fr</td>\n",
       "      <td>0</td>\n",
       "      <td>[[-7.761435, -10.766346, -5.0838156, -7.149656...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8252</th>\n",
       "      <td>pt2_320music</td>\n",
       "      <td>[0.22924782, 0.24608938, 0.22092597, 0.1755486...</td>\n",
       "      <td>pt</td>\n",
       "      <td>0</td>\n",
       "      <td>[[24.005661, 28.008053, 27.576296, 24.394636, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                name                                              array  \\\n",
       "6798    ja0_248music  [-0.09191726, -0.08297913, -0.082977295, -0.09...   \n",
       "5711  fr0_14211music  [0.019935856, 0.018189777, 0.017345574, 0.0169...   \n",
       "8252    pt2_320music  [0.22924782, 0.24608938, 0.22092597, 0.1755486...   \n",
       "\n",
       "     language_code  label                                log_mel_spectrogram  \n",
       "6798            ja      0  [[11.162772, 8.866536, -0.89963734, -3.65234, ...  \n",
       "5711            fr      0  [[-7.761435, -10.766346, -5.0838156, -7.149656...  \n",
       "8252            pt      0  [[24.005661, 28.008053, 27.576296, 24.394636, ...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8db98203",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.476899Z",
     "iopub.status.busy": "2025-05-19T14:39:15.476402Z",
     "iopub.status.idle": "2025-05-19T14:39:15.571017Z",
     "shell.execute_reply": "2025-05-19T14:39:15.570406Z"
    },
    "papermill": {
     "duration": 0.099706,
     "end_time": "2025-05-19T14:39:15.572083",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.472377",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9f6811b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.578912Z",
     "iopub.status.busy": "2025-05-19T14:39:15.578672Z",
     "iopub.status.idle": "2025-05-19T14:39:15.584232Z",
     "shell.execute_reply": "2025-05-19T14:39:15.583541Z"
    },
    "papermill": {
     "duration": 0.010084,
     "end_time": "2025-05-19T14:39:15.585279",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.575195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AudioCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(AudioCNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.dropout = nn.Dropout(p=0.3)\n",
    "        self.fc1 = nn.Linear(64 * 32 * 70, 128)\n",
    "        self.fc2 = nn.Linear(128, 1)\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.pool(torch.relu(self.conv1(x)))\n",
    "        x = self.dropout(x)\n",
    "        x = self.pool(torch.relu(self.conv2(x)))\n",
    "        x = self.dropout(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = torch.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = self.fc2(x)\n",
    "        x = self.sigmoid(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "83a5175a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.592324Z",
     "iopub.status.busy": "2025-05-19T14:39:15.591845Z",
     "iopub.status.idle": "2025-05-19T14:39:15.596278Z",
     "shell.execute_reply": "2025-05-19T14:39:15.595602Z"
    },
    "papermill": {
     "duration": 0.008965,
     "end_time": "2025-05-19T14:39:15.597292",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.588327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AudioDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, audios, labels):\n",
    "        self.audios = audios\n",
    "        self.labels = labels\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.audios)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        label = self.labels[idx]\n",
    "        mel_spec = self.audios[idx]\n",
    "        mel_spec = torch.tensor(mel_spec).unsqueeze(0).float()\n",
    "        label = torch.tensor(label).unsqueeze(0).float()\n",
    "        return mel_spec, label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f42e7298",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.604070Z",
     "iopub.status.busy": "2025-05-19T14:39:15.603846Z",
     "iopub.status.idle": "2025-05-19T14:39:15.607639Z",
     "shell.execute_reply": "2025-05-19T14:39:15.607010Z"
    },
    "papermill": {
     "duration": 0.008324,
     "end_time": "2025-05-19T14:39:15.608633",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.600309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_training_loss(losses):\n",
    "    epochs = range(1, len(losses) + 1)\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.plot(epochs, losses, label='Training Loss', color='blue')\n",
    "    plt.title('Training Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6de71e84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.615349Z",
     "iopub.status.busy": "2025-05-19T14:39:15.615153Z",
     "iopub.status.idle": "2025-05-19T14:39:15.620553Z",
     "shell.execute_reply": "2025-05-19T14:39:15.619932Z"
    },
    "papermill": {
     "duration": 0.009981,
     "end_time": "2025-05-19T14:39:15.621597",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.611616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(model, train_loader, criterion, optimizer, num_epochs=5):\n",
    "    train_losses = []\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "\n",
    "        with tqdm(train_loader, desc=f'epoch {epoch+1}/{num_epochs}', unit='batch') as pbar:\n",
    "            for data in pbar:\n",
    "                inputs, labels = data\n",
    "                inputs, labels = inputs.to(device), labels.to(device)\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "                optimizer.step()\n",
    "                running_loss += loss.item()\n",
    "                pbar.set_postfix(loss=running_loss/len(train_loader))\n",
    "        epoch_loss = running_loss / len(train_loader)\n",
    "        train_losses.append(epoch_loss)\n",
    "        print(f\"Epoch {epoch+1}/{num_epochs} - Loss: {epoch_loss:.4f}\")\n",
    "    plot_training_loss(train_losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dcabbf3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.628203Z",
     "iopub.status.busy": "2025-05-19T14:39:15.628028Z",
     "iopub.status.idle": "2025-05-19T14:39:15.631511Z",
     "shell.execute_reply": "2025-05-19T14:39:15.630849Z"
    },
    "papermill": {
     "duration": 0.007982,
     "end_time": "2025-05-19T14:39:15.632542",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.624560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = AudioDataset(log_mel_spectrograms[:7199], labels[:7199])\n",
    "test_dataset = AudioDataset(log_mel_spectrograms[7200:-1], labels[7200:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "28d36df9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.639410Z",
     "iopub.status.busy": "2025-05-19T14:39:15.639028Z",
     "iopub.status.idle": "2025-05-19T14:39:15.642423Z",
     "shell.execute_reply": "2025-05-19T14:39:15.641940Z"
    },
    "papermill": {
     "duration": 0.007817,
     "end_time": "2025-05-19T14:39:15.643372",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.635555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=8)\n",
    "test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6fd2e44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:15.649788Z",
     "iopub.status.busy": "2025-05-19T14:39:15.649618Z",
     "iopub.status.idle": "2025-05-19T14:39:20.443673Z",
     "shell.execute_reply": "2025-05-19T14:39:20.443016Z"
    },
    "papermill": {
     "duration": 4.798807,
     "end_time": "2025-05-19T14:39:20.445089",
     "exception": false,
     "start_time": "2025-05-19T14:39:15.646282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = AudioCNN()\n",
    "model = model.to(device)\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=0.0001, momentum=0.9)\n",
    "#optimizer = optim.Adam(model.parameters(), lr=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ad004a6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:39:20.453490Z",
     "iopub.status.busy": "2025-05-19T14:39:20.453113Z",
     "iopub.status.idle": "2025-05-19T14:40:21.771977Z",
     "shell.execute_reply": "2025-05-19T14:40:21.771342Z"
    },
    "papermill": {
     "duration": 61.324426,
     "end_time": "2025-05-19T14:40:21.773023",
     "exception": false,
     "start_time": "2025-05-19T14:39:20.448597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 1/5: 100%|██████████| 900/900 [00:13<00:00, 68.49batch/s, loss=0.19]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5 - Loss: 0.1900\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 2/5: 100%|██████████| 900/900 [00:11<00:00, 75.43batch/s, loss=0.138]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2/5 - Loss: 0.1381\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 3/5: 100%|██████████| 900/900 [00:11<00:00, 75.19batch/s, loss=0.115]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3/5 - Loss: 0.1149\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 4/5: 100%|██████████| 900/900 [00:12<00:00, 74.89batch/s, loss=0.108]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4/5 - Loss: 0.1082\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 5/5: 100%|██████████| 900/900 [00:12<00:00, 74.97batch/s, loss=0.127]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5/5 - Loss: 0.1267\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_model(model, train_loader, criterion, optimizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f5d00f3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:40:22.164559Z",
     "iopub.status.busy": "2025-05-19T14:40:22.164330Z",
     "iopub.status.idle": "2025-05-19T14:40:22.169476Z",
     "shell.execute_reply": "2025-05-19T14:40:22.168943Z"
    },
    "papermill": {
     "duration": 0.201278,
     "end_time": "2025-05-19T14:40:22.170486",
     "exception": false,
     "start_time": "2025-05-19T14:40:21.969208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_model(model, test_loader):\n",
    "    model.eval()\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in test_loader:\n",
    "            inputs, labels = data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "\n",
    "            predicted = (outputs > 0.5).float()\n",
    "\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "            all_preds.extend(predicted.cpu().numpy())\n",
    "\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    precision = precision_score(all_labels, all_preds)\n",
    "    recall = recall_score(all_labels, all_preds)\n",
    "    f1 = f1_score(all_labels, all_preds)\n",
    "\n",
    "    print(f\"Test Results - Accuracy: {accuracy*100:.2f}%, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}\")\n",
    "    \n",
    "    return accuracy, precision, recall, f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d53a6a32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:40:22.556684Z",
     "iopub.status.busy": "2025-05-19T14:40:22.556431Z",
     "iopub.status.idle": "2025-05-19T14:40:23.458226Z",
     "shell.execute_reply": "2025-05-19T14:40:23.457525Z"
    },
    "papermill": {
     "duration": 1.094956,
     "end_time": "2025-05-19T14:40:23.459478",
     "exception": false,
     "start_time": "2025-05-19T14:40:22.364522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Results - Accuracy: 96.33%, Precision: 0.94, Recall: 0.99, F1 Score: 0.96\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9633129516397999,\n",
       " 0.9411764705882353,\n",
       " 0.9889624724061811,\n",
       " 0.9644779332615716)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_model(model, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b4f1821c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:40:23.913492Z",
     "iopub.status.busy": "2025-05-19T14:40:23.912860Z",
     "iopub.status.idle": "2025-05-19T14:40:24.073957Z",
     "shell.execute_reply": "2025-05-19T14:40:24.073358Z"
    },
    "papermill": {
     "duration": 0.367743,
     "end_time": "2025-05-19T14:40:24.075257",
     "exception": false,
     "start_time": "2025-05-19T14:40:23.707514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.save(model.state_dict(), 'speech_music_classificator.pth')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7454483,
     "sourceId": 11863285,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 329.463063,
   "end_time": "2025-05-19T14:40:27.868398",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-19T14:34:58.405335",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
