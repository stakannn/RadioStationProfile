{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fdc68710",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-19T14:53:41.747096Z",
     "iopub.status.busy": "2025-05-19T14:53:41.746833Z",
     "iopub.status.idle": "2025-05-19T14:53:49.519054Z",
     "shell.execute_reply": "2025-05-19T14:53:49.518445Z"
    },
    "papermill": {
     "duration": 7.778455,
     "end_time": "2025-05-19T14:53:49.520402",
     "exception": false,
     "start_time": "2025-05-19T14:53:41.741947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import librosa\n",
    "import torch\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f0875c08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:53:49.527953Z",
     "iopub.status.busy": "2025-05-19T14:53:49.527604Z",
     "iopub.status.idle": "2025-05-19T14:55:25.802997Z",
     "shell.execute_reply": "2025-05-19T14:55:25.802184Z"
    },
    "papermill": {
     "duration": 96.280687,
     "end_time": "2025-05-19T14:55:25.804589",
     "exception": false,
     "start_time": "2025-05-19T14:53:49.523902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_parquet('/kaggle/input/speech-and-music-in-languages/speechAndMusicWLanguages.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6838569d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:55:25.812502Z",
     "iopub.status.busy": "2025-05-19T14:55:25.812232Z",
     "iopub.status.idle": "2025-05-19T14:55:25.826914Z",
     "shell.execute_reply": "2025-05-19T14:55:25.826194Z"
    },
    "papermill": {
     "duration": 0.019758,
     "end_time": "2025-05-19T14:55:25.828066",
     "exception": false,
     "start_time": "2025-05-19T14:55:25.808308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = data.sample(frac=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "17716e83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:55:25.835462Z",
     "iopub.status.busy": "2025-05-19T14:55:25.835045Z",
     "iopub.status.idle": "2025-05-19T14:55:25.838791Z",
     "shell.execute_reply": "2025-05-19T14:55:25.838035Z"
    },
    "papermill": {
     "duration": 0.008769,
     "end_time": "2025-05-19T14:55:25.839893",
     "exception": false,
     "start_time": "2025-05-19T14:55:25.831124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess(audio, sr=48000):\n",
    "    mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sr)\n",
    "    log_mel_spectrogram = librosa.power_to_db(mel_spectrogram)\n",
    "    return log_mel_spectrogram # (128, 282)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "271cb5ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:55:25.846962Z",
     "iopub.status.busy": "2025-05-19T14:55:25.846585Z",
     "iopub.status.idle": "2025-05-19T14:58:02.982497Z",
     "shell.execute_reply": "2025-05-19T14:58:02.981678Z"
    },
    "papermill": {
     "duration": 157.141006,
     "end_time": "2025-05-19T14:58:02.984110",
     "exception": false,
     "start_time": "2025-05-19T14:55:25.843104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data['log_mel_spectrogram'] = data['array'].apply(lambda x: preprocess(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9468da60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:02.992093Z",
     "iopub.status.busy": "2025-05-19T14:58:02.991237Z",
     "iopub.status.idle": "2025-05-19T14:58:02.995038Z",
     "shell.execute_reply": "2025-05-19T14:58:02.994518Z"
    },
    "papermill": {
     "duration": 0.008413,
     "end_time": "2025-05-19T14:58:02.995995",
     "exception": false,
     "start_time": "2025-05-19T14:58:02.987582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def labels_to_int(label):\n",
    "    if label == 'speech':\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "430a690f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.003266Z",
     "iopub.status.busy": "2025-05-19T14:58:03.002542Z",
     "iopub.status.idle": "2025-05-19T14:58:03.009780Z",
     "shell.execute_reply": "2025-05-19T14:58:03.009267Z"
    },
    "papermill": {
     "duration": 0.011776,
     "end_time": "2025-05-19T14:58:03.010791",
     "exception": false,
     "start_time": "2025-05-19T14:58:02.999015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data['label'] = data['label'].apply(lambda x: labels_to_int(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3ec77031",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.017654Z",
     "iopub.status.busy": "2025-05-19T14:58:03.017229Z",
     "iopub.status.idle": "2025-05-19T14:58:03.020880Z",
     "shell.execute_reply": "2025-05-19T14:58:03.020376Z"
    },
    "papermill": {
     "duration": 0.008124,
     "end_time": "2025-05-19T14:58:03.021876",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.013752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "labels = data['label'].values.tolist()\n",
    "log_mel_spectrograms = data['log_mel_spectrogram'].values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e62caa8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.028662Z",
     "iopub.status.busy": "2025-05-19T14:58:03.028152Z",
     "iopub.status.idle": "2025-05-19T14:58:03.214762Z",
     "shell.execute_reply": "2025-05-19T14:58:03.214011Z"
    },
    "papermill": {
     "duration": 0.190946,
     "end_time": "2025-05-19T14:58:03.215782",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.024836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>array</th>\n",
       "      <th>language_code</th>\n",
       "      <th>label</th>\n",
       "      <th>log_mel_spectrogram</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6063</th>\n",
       "      <td>id9_163music</td>\n",
       "      <td>[-0.040989608, -0.042899452, -0.04477538, -0.0...</td>\n",
       "      <td>id</td>\n",
       "      <td>0</td>\n",
       "      <td>[[-1.4914739, -7.883186, -21.529648, -17.49062...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2920</th>\n",
       "      <td>lt420speech</td>\n",
       "      <td>[-1.5613034e-23, -4.9630837e-24, 1.6543612e-24...</td>\n",
       "      <td>lt</td>\n",
       "      <td>1</td>\n",
       "      <td>[[-59.904144, -59.904144, -59.904144, -59.9041...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>en158speech</td>\n",
       "      <td>[0.0, 2.0003691e-14, 2.0051172e-14, 1.4785218e...</td>\n",
       "      <td>en</td>\n",
       "      <td>1</td>\n",
       "      <td>[[-47.32705, -47.32705, -20.749966, -10.009022...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name                                              array  \\\n",
       "6063  id9_163music  [-0.040989608, -0.042899452, -0.04477538, -0.0...   \n",
       "2920   lt420speech  [-1.5613034e-23, -4.9630837e-24, 1.6543612e-24...   \n",
       "158    en158speech  [0.0, 2.0003691e-14, 2.0051172e-14, 1.4785218e...   \n",
       "\n",
       "     language_code  label                                log_mel_spectrogram  \n",
       "6063            id      0  [[-1.4914739, -7.883186, -21.529648, -17.49062...  \n",
       "2920            lt      1  [[-59.904144, -59.904144, -59.904144, -59.9041...  \n",
       "158             en      1  [[-47.32705, -47.32705, -20.749966, -10.009022...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "345db4a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.223104Z",
     "iopub.status.busy": "2025-05-19T14:58:03.222710Z",
     "iopub.status.idle": "2025-05-19T14:58:03.315743Z",
     "shell.execute_reply": "2025-05-19T14:58:03.315155Z"
    },
    "papermill": {
     "duration": 0.097865,
     "end_time": "2025-05-19T14:58:03.316851",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.218986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f16419c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.324903Z",
     "iopub.status.busy": "2025-05-19T14:58:03.324692Z",
     "iopub.status.idle": "2025-05-19T14:58:03.330064Z",
     "shell.execute_reply": "2025-05-19T14:58:03.329549Z"
    },
    "papermill": {
     "duration": 0.01028,
     "end_time": "2025-05-19T14:58:03.331204",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.320924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AudioCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(AudioCNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)\n",
    "        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n",
    "        self.pool = nn.MaxPool2d(2, 2)\n",
    "        self.dropout = nn.Dropout(p=0.3)\n",
    "        self.fc1 = nn.Linear(64 * 32 * 70, 128)\n",
    "        self.fc2 = nn.Linear(128, 1)\n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.pool(torch.relu(self.conv1(x)))\n",
    "        x = self.dropout(x)\n",
    "        x = self.pool(torch.relu(self.conv2(x)))\n",
    "        x = self.dropout(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = torch.relu(self.fc1(x))\n",
    "        x = self.dropout(x)\n",
    "        x = self.fc2(x)\n",
    "        x = self.sigmoid(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "14f35f26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.338387Z",
     "iopub.status.busy": "2025-05-19T14:58:03.338133Z",
     "iopub.status.idle": "2025-05-19T14:58:03.343029Z",
     "shell.execute_reply": "2025-05-19T14:58:03.342327Z"
    },
    "papermill": {
     "duration": 0.009885,
     "end_time": "2025-05-19T14:58:03.344193",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.334308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class AudioDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, audios, labels):\n",
    "        self.audios = audios\n",
    "        self.labels = labels\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.audios)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        label = self.labels[idx]\n",
    "        mel_spec = self.audios[idx]\n",
    "        mel_spec = torch.tensor(mel_spec).unsqueeze(0).float()\n",
    "        label = torch.tensor(label).unsqueeze(0).float()\n",
    "        return mel_spec, label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0f7d5c7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.351490Z",
     "iopub.status.busy": "2025-05-19T14:58:03.351061Z",
     "iopub.status.idle": "2025-05-19T14:58:03.354878Z",
     "shell.execute_reply": "2025-05-19T14:58:03.354377Z"
    },
    "papermill": {
     "duration": 0.008514,
     "end_time": "2025-05-19T14:58:03.355873",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.347359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_training_loss(losses):\n",
    "    epochs = range(1, len(losses) + 1)\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.plot(epochs, losses, label='Training Loss', color='blue')\n",
    "    plt.title('Training Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "db9b45e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.362939Z",
     "iopub.status.busy": "2025-05-19T14:58:03.362719Z",
     "iopub.status.idle": "2025-05-19T14:58:03.367825Z",
     "shell.execute_reply": "2025-05-19T14:58:03.367305Z"
    },
    "papermill": {
     "duration": 0.009667,
     "end_time": "2025-05-19T14:58:03.368846",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.359179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model(model, train_loader, criterion, optimizer, num_epochs=5):\n",
    "    train_losses = []\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "\n",
    "        with tqdm(train_loader, desc=f'epoch {epoch+1}/{num_epochs}', unit='batch') as pbar:\n",
    "            for data in pbar:\n",
    "                inputs, labels = data\n",
    "                inputs, labels = inputs.to(device), labels.to(device)\n",
    "                optimizer.zero_grad()\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "                optimizer.step()\n",
    "                running_loss += loss.item()\n",
    "                pbar.set_postfix(loss=running_loss/len(train_loader))\n",
    "        epoch_loss = running_loss / len(train_loader)\n",
    "        train_losses.append(epoch_loss)\n",
    "        print(f\"Epoch {epoch+1}/{num_epochs} - Loss: {epoch_loss:.4f}\")\n",
    "    plot_training_loss(train_losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3df40a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.375662Z",
     "iopub.status.busy": "2025-05-19T14:58:03.375477Z",
     "iopub.status.idle": "2025-05-19T14:58:03.379038Z",
     "shell.execute_reply": "2025-05-19T14:58:03.378376Z"
    },
    "papermill": {
     "duration": 0.00807,
     "end_time": "2025-05-19T14:58:03.380121",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.372051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dataset = AudioDataset(log_mel_spectrograms[:7199], labels[:7199])\n",
    "test_dataset = AudioDataset(log_mel_spectrograms[7200:-1], labels[7200:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "efd36291",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.387163Z",
     "iopub.status.busy": "2025-05-19T14:58:03.386677Z",
     "iopub.status.idle": "2025-05-19T14:58:03.390283Z",
     "shell.execute_reply": "2025-05-19T14:58:03.389794Z"
    },
    "papermill": {
     "duration": 0.008033,
     "end_time": "2025-05-19T14:58:03.391192",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.383159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=8)\n",
    "test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "342496dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:03.398429Z",
     "iopub.status.busy": "2025-05-19T14:58:03.397942Z",
     "iopub.status.idle": "2025-05-19T14:58:08.345791Z",
     "shell.execute_reply": "2025-05-19T14:58:08.344962Z"
    },
    "papermill": {
     "duration": 4.952931,
     "end_time": "2025-05-19T14:58:08.347292",
     "exception": false,
     "start_time": "2025-05-19T14:58:03.394361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = AudioCNN()\n",
    "model = model.to(device)\n",
    "criterion = nn.BCELoss()\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=0.0001, momentum=0.9)\n",
    "#optimizer = optim.Adam(model.parameters(), lr=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d2ac25de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:58:08.355513Z",
     "iopub.status.busy": "2025-05-19T14:58:08.355058Z",
     "iopub.status.idle": "2025-05-19T14:59:10.335196Z",
     "shell.execute_reply": "2025-05-19T14:59:10.334457Z"
    },
    "papermill": {
     "duration": 61.985295,
     "end_time": "2025-05-19T14:59:10.336265",
     "exception": false,
     "start_time": "2025-05-19T14:58:08.350970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 1/5: 100%|██████████| 900/900 [00:13<00:00, 67.98batch/s, loss=0.249]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5 - Loss: 0.2489\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 2/5: 100%|██████████| 900/900 [00:11<00:00, 75.02batch/s, loss=0.159]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2/5 - Loss: 0.1591\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 3/5: 100%|██████████| 900/900 [00:12<00:00, 74.56batch/s, loss=0.145]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3/5 - Loss: 0.1452\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 4/5: 100%|██████████| 900/900 [00:12<00:00, 74.54batch/s, loss=0.132]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4/5 - Loss: 0.1318\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "epoch 5/5: 100%|██████████| 900/900 [00:12<00:00, 74.44batch/s, loss=0.19]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5/5 - Loss: 0.1898\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_model(model, train_loader, criterion, optimizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ffe42e0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:59:10.739469Z",
     "iopub.status.busy": "2025-05-19T14:59:10.739170Z",
     "iopub.status.idle": "2025-05-19T14:59:10.744997Z",
     "shell.execute_reply": "2025-05-19T14:59:10.744458Z"
    },
    "papermill": {
     "duration": 0.205017,
     "end_time": "2025-05-19T14:59:10.746057",
     "exception": false,
     "start_time": "2025-05-19T14:59:10.541040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test_model(model, test_loader):\n",
    "    model.eval()\n",
    "    all_labels = []\n",
    "    all_preds = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data in test_loader:\n",
    "            inputs, labels = data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "\n",
    "            predicted = (outputs > 0.5).float()\n",
    "\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "            all_preds.extend(predicted.cpu().numpy())\n",
    "\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    precision = precision_score(all_labels, all_preds)\n",
    "    recall = recall_score(all_labels, all_preds)\n",
    "    f1 = f1_score(all_labels, all_preds)\n",
    "\n",
    "    print(f\"Test Results - Accuracy: {accuracy*100:.2f}%, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}\")\n",
    "    \n",
    "    return accuracy, precision, recall, f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "03b21e6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:59:11.193865Z",
     "iopub.status.busy": "2025-05-19T14:59:11.193595Z",
     "iopub.status.idle": "2025-05-19T14:59:12.108227Z",
     "shell.execute_reply": "2025-05-19T14:59:12.107486Z"
    },
    "papermill": {
     "duration": 1.165533,
     "end_time": "2025-05-19T14:59:12.109416",
     "exception": false,
     "start_time": "2025-05-19T14:59:10.943883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Results - Accuracy: 94.89%, Precision: 0.91, Recall: 1.00, F1 Score: 0.95\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9488604780433574,\n",
       " 0.9088145896656535,\n",
       " 0.9977753058954394,\n",
       " 0.9512195121951219)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_model(model, test_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7647a4e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-19T14:59:12.577786Z",
     "iopub.status.busy": "2025-05-19T14:59:12.577215Z",
     "iopub.status.idle": "2025-05-19T14:59:12.731931Z",
     "shell.execute_reply": "2025-05-19T14:59:12.731267Z"
    },
    "papermill": {
     "duration": 0.403081,
     "end_time": "2025-05-19T14:59:12.733235",
     "exception": false,
     "start_time": "2025-05-19T14:59:12.330154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.save(model, 'speech_music_classificator.pth')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7454483,
     "sourceId": 11863285,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 338.586703,
   "end_time": "2025-05-19T14:59:15.796593",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-19T14:53:37.209890",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
