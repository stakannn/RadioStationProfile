{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11863285,"sourceType":"datasetVersion","datasetId":7454483}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import librosa\nimport torch\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:39:19.863468Z","iopub.execute_input":"2025-05-19T13:39:19.863810Z","iopub.status.idle":"2025-05-19T13:39:25.190360Z","shell.execute_reply.started":"2025-05-19T13:39:19.863792Z","shell.execute_reply":"2025-05-19T13:39:25.189433Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"data = pd.read_parquet('/kaggle/input/speech-and-music-in-languages/speechAndMusicWLanguages.parquet')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:40:34.435562Z","iopub.execute_input":"2025-05-19T13:40:34.435840Z","iopub.status.idle":"2025-05-19T13:42:05.407987Z","shell.execute_reply.started":"2025-05-19T13:40:34.435820Z","shell.execute_reply":"2025-05-19T13:42:05.407202Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data = data.sample(frac=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:42:05.409282Z","iopub.execute_input":"2025-05-19T13:42:05.409659Z","iopub.status.idle":"2025-05-19T13:42:05.419910Z","shell.execute_reply.started":"2025-05-19T13:42:05.409634Z","shell.execute_reply":"2025-05-19T13:42:05.419244Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def preprocess(audio, sr=48000):\n    mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sr)\n    log_mel_spectrogram = librosa.power_to_db(mel_spectrogram)\n    return log_mel_spectrogram # (128, 282)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:42:05.420603Z","iopub.execute_input":"2025-05-19T13:42:05.420923Z","iopub.status.idle":"2025-05-19T13:42:05.428299Z","shell.execute_reply.started":"2025-05-19T13:42:05.420884Z","shell.execute_reply":"2025-05-19T13:42:05.427727Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"data['log_mel_spectrogram'] = data['array'].apply(lambda x: preprocess(x))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:42:05.429965Z","iopub.execute_input":"2025-05-19T13:42:05.430173Z","iopub.status.idle":"2025-05-19T13:44:37.704849Z","shell.execute_reply.started":"2025-05-19T13:42:05.430157Z","shell.execute_reply":"2025-05-19T13:44:37.704052Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def labels_to_int(label):\n    if label == 'speech':\n        return 1\n    else:\n        return 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:37.705659Z","iopub.execute_input":"2025-05-19T13:44:37.706109Z","iopub.status.idle":"2025-05-19T13:44:37.710140Z","shell.execute_reply.started":"2025-05-19T13:44:37.706088Z","shell.execute_reply":"2025-05-19T13:44:37.709372Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"data['label'] = data['label'].apply(lambda x: labels_to_int(x))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:37.711633Z","iopub.execute_input":"2025-05-19T13:44:37.711864Z","iopub.status.idle":"2025-05-19T13:44:37.730273Z","shell.execute_reply.started":"2025-05-19T13:44:37.711848Z","shell.execute_reply":"2025-05-19T13:44:37.729730Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"labels = data['label'].values.tolist()\nlog_mel_spectrograms = data['log_mel_spectrogram'].values.tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:37.730820Z","iopub.execute_input":"2025-05-19T13:44:37.731052Z","iopub.status.idle":"2025-05-19T13:44:37.743134Z","shell.execute_reply.started":"2025-05-19T13:44:37.731028Z","shell.execute_reply":"2025-05-19T13:44:37.742525Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"data.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:37.743804Z","iopub.execute_input":"2025-05-19T13:44:37.744043Z","iopub.status.idle":"2025-05-19T13:44:37.938793Z","shell.execute_reply.started":"2025-05-19T13:44:37.744021Z","shell.execute_reply":"2025-05-19T13:44:37.938204Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"               name                                              array  \\\n8787   ro0_457music  [0.13911152, 0.18728906, 0.24271896, 0.2812215...   \n8517   ro1_717music  [0.09163862, 0.046721753, -0.004081469, -0.060...   \n6181  id1_7181music  [-0.38206467, -0.42008248, -0.4705785, -0.5187...   \n\n     language_code  label                                log_mel_spectrogram  \n8787            ro      0  [[13.398629, 13.872615, 13.61455, 13.88406, 13...  \n8517            ro      0  [[15.646151, 8.066479, -2.4328437, -2.4346108,...  \n6181            id      0  [[11.987819, 19.880165, 22.689945, 21.087116, ...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>array</th>\n      <th>language_code</th>\n      <th>label</th>\n      <th>log_mel_spectrogram</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8787</th>\n      <td>ro0_457music</td>\n      <td>[0.13911152, 0.18728906, 0.24271896, 0.2812215...</td>\n      <td>ro</td>\n      <td>0</td>\n      <td>[[13.398629, 13.872615, 13.61455, 13.88406, 13...</td>\n    </tr>\n    <tr>\n      <th>8517</th>\n      <td>ro1_717music</td>\n      <td>[0.09163862, 0.046721753, -0.004081469, -0.060...</td>\n      <td>ro</td>\n      <td>0</td>\n      <td>[[15.646151, 8.066479, -2.4328437, -2.4346108,...</td>\n    </tr>\n    <tr>\n      <th>6181</th>\n      <td>id1_7181music</td>\n      <td>[-0.38206467, -0.42008248, -0.4705785, -0.5187...</td>\n      <td>id</td>\n      <td>0</td>\n      <td>[[11.987819, 19.880165, 22.689945, 21.087116, ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:37.939449Z","iopub.execute_input":"2025-05-19T13:44:37.939753Z","iopub.status.idle":"2025-05-19T13:44:38.029769Z","shell.execute_reply.started":"2025-05-19T13:44:37.939724Z","shell.execute_reply":"2025-05-19T13:44:38.029102Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"class AudioCNN(nn.Module):\n    def __init__(self):\n        super(AudioCNN, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.dropout = nn.Dropout(p=0.3)\n        self.fc1 = nn.Linear(64 * 32 * 70, 128)\n        self.fc2 = nn.Linear(128, 1)\n        self.sigmoid = nn.Sigmoid()\n\n    def forward(self, x):\n        x = self.pool(torch.relu(self.conv1(x)))\n        x = self.dropout(x)\n        x = self.pool(torch.relu(self.conv2(x)))\n        x = self.dropout(x)\n        x = x.view(x.size(0), -1)\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = self.fc2(x)\n        x = self.sigmoid(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.032136Z","iopub.execute_input":"2025-05-19T13:44:38.032321Z","iopub.status.idle":"2025-05-19T13:44:38.042203Z","shell.execute_reply.started":"2025-05-19T13:44:38.032307Z","shell.execute_reply":"2025-05-19T13:44:38.041513Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"class AudioDataset(torch.utils.data.Dataset):\n    def __init__(self, audios, labels):\n        self.audios = audios\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.audios)\n\n    def __getitem__(self, idx):\n        label = self.labels[idx]\n        mel_spec = self.audios[idx]\n        mel_spec = torch.tensor(mel_spec).unsqueeze(0).float()\n        label = torch.tensor(label).unsqueeze(0).float()\n        return mel_spec, label","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.042825Z","iopub.execute_input":"2025-05-19T13:44:38.043029Z","iopub.status.idle":"2025-05-19T13:44:38.053217Z","shell.execute_reply.started":"2025-05-19T13:44:38.043014Z","shell.execute_reply":"2025-05-19T13:44:38.052631Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"def plot_training_loss(losses):\n    epochs = range(1, len(losses) + 1)\n\n    plt.figure(figsize=(8, 6))\n    plt.plot(epochs, losses, label='Training Loss', color='blue')\n    plt.title('Training Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.053869Z","iopub.execute_input":"2025-05-19T13:44:38.054324Z","iopub.status.idle":"2025-05-19T13:44:38.066988Z","shell.execute_reply.started":"2025-05-19T13:44:38.054308Z","shell.execute_reply":"2025-05-19T13:44:38.066367Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"def train_model(model, train_loader, criterion, optimizer, num_epochs=5):\n    train_losses = []\n\n    for epoch in range(num_epochs):\n        model.train()\n        running_loss = 0.0\n\n        with tqdm(train_loader, desc=f'epoch {epoch+1}/{num_epochs}', unit='batch') as pbar:\n            for data in pbar:\n                inputs, labels = data\n                inputs, labels = inputs.to(device), labels.to(device)\n                optimizer.zero_grad()\n                outputs = model(inputs)\n                loss = criterion(outputs, labels)\n                loss.backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n                optimizer.step()\n                running_loss += loss.item()\n                pbar.set_postfix(loss=running_loss/len(train_loader))\n        epoch_loss = running_loss / len(train_loader)\n        train_losses.append(epoch_loss)\n        print(f\"Epoch {epoch+1}/{num_epochs} - Loss: {epoch_loss:.4f}\")\n    plot_training_loss(train_losses)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.067632Z","iopub.execute_input":"2025-05-19T13:44:38.067843Z","iopub.status.idle":"2025-05-19T13:44:38.080217Z","shell.execute_reply.started":"2025-05-19T13:44:38.067828Z","shell.execute_reply":"2025-05-19T13:44:38.079661Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"train_dataset = AudioDataset(log_mel_spectrograms[:7199], labels[:7199])\ntest_dataset = AudioDataset(log_mel_spectrograms[7200:-1], labels[7200:-1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.080821Z","iopub.execute_input":"2025-05-19T13:44:38.081010Z","iopub.status.idle":"2025-05-19T13:44:38.091115Z","shell.execute_reply.started":"2025-05-19T13:44:38.080995Z","shell.execute_reply":"2025-05-19T13:44:38.090626Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=8)\ntest_loader = torch.utils.data.DataLoader(test_dataset, batch_size=8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.091750Z","iopub.execute_input":"2025-05-19T13:44:38.091978Z","iopub.status.idle":"2025-05-19T13:44:38.102956Z","shell.execute_reply.started":"2025-05-19T13:44:38.091954Z","shell.execute_reply":"2025-05-19T13:44:38.102268Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"model = AudioCNN()\nmodel = model.to(device)\ncriterion = nn.BCELoss()\noptimizer = optim.Adam(model.parameters(), lr=1e-4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:38.103708Z","iopub.execute_input":"2025-05-19T13:44:38.103940Z","iopub.status.idle":"2025-05-19T13:44:41.049294Z","shell.execute_reply.started":"2025-05-19T13:44:38.103920Z","shell.execute_reply":"2025-05-19T13:44:41.048769Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"train_model(model, train_loader, criterion, optimizer)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:44:51.773650Z","iopub.execute_input":"2025-05-19T13:44:51.774074Z","iopub.status.idle":"2025-05-19T13:46:07.391634Z","shell.execute_reply.started":"2025-05-19T13:44:51.774054Z","shell.execute_reply":"2025-05-19T13:46:07.391001Z"}},"outputs":[{"name":"stderr","text":"epoch 1/5: 100%|██████████| 900/900 [00:15<00:00, 56.32batch/s, loss=1.4]  \n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/5 - Loss: 1.4002\n","output_type":"stream"},{"name":"stderr","text":"epoch 2/5: 100%|██████████| 900/900 [00:14<00:00, 60.89batch/s, loss=0.0422]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 2/5 - Loss: 0.0422\n","output_type":"stream"},{"name":"stderr","text":"epoch 3/5: 100%|██████████| 900/900 [00:14<00:00, 60.68batch/s, loss=0.0291]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 3/5 - Loss: 0.0291\n","output_type":"stream"},{"name":"stderr","text":"epoch 4/5: 100%|██████████| 900/900 [00:14<00:00, 60.74batch/s, loss=0.0193]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 4/5 - Loss: 0.0193\n","output_type":"stream"},{"name":"stderr","text":"epoch 5/5: 100%|██████████| 900/900 [00:14<00:00, 60.25batch/s, loss=0.00709]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 5/5 - Loss: 0.0071\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"def test_model(model, test_loader):\n    model.eval()\n    all_labels = []\n    all_preds = []\n\n    with torch.no_grad():\n        for data in test_loader:\n            inputs, labels = data\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            outputs = model(inputs)\n\n            predicted = (outputs > 0.5).float()\n\n            all_labels.extend(labels.cpu().numpy())\n            all_preds.extend(predicted.cpu().numpy())\n\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision = precision_score(all_labels, all_preds)\n    recall = recall_score(all_labels, all_preds)\n    f1 = f1_score(all_labels, all_preds)\n\n    print(f\"Test Results - Accuracy: {accuracy*100:.2f}%, Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}\")\n    \n    return accuracy, precision, recall, f1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:46:27.733827Z","iopub.execute_input":"2025-05-19T13:46:27.734393Z","iopub.status.idle":"2025-05-19T13:46:27.742921Z","shell.execute_reply.started":"2025-05-19T13:46:27.734371Z","shell.execute_reply":"2025-05-19T13:46:27.742249Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"test_model(model, test_loader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-19T13:46:29.635770Z","iopub.execute_input":"2025-05-19T13:46:29.636040Z","iopub.status.idle":"2025-05-19T13:46:30.599412Z","shell.execute_reply.started":"2025-05-19T13:46:29.636019Z","shell.execute_reply":"2025-05-19T13:46:30.598822Z"}},"outputs":[{"name":"stdout","text":"Test Results - Accuracy: 99.50%, Precision: 0.99, Recall: 1.00, F1 Score: 1.00\n","output_type":"stream"},{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"(0.9949972206781545,\n 0.9924650161463939,\n 0.9978354978354979,\n 0.9951430113329737)"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}